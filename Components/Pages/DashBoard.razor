 @page "/dashboard"
@using MudBlazor
@rendermode InteractiveServer
@using TaskManager_Frontend.Data
@inject IJSRuntime JSRuntime
<MudAppBar Fixed="false" Style="background-color : #ffffff;">
    
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Dark" Edge="Edge.Start" />
    <MudSpacer />
   
    <MudBadge Color="Color.Success" Overlap="true" Bordered="true">
        <MudAvatar>
            <MudImage Src="images/mony.jpg" />
        </MudAvatar>
    </MudBadge>
</MudAppBar>

<div class="container-fluid" >
    <div class="row flex-nowrap">
        <div class="col-auto col-md-3 col-xl-2 px-sm-2 px-0 " style="background-color:#eaeaea;">
            <div class="d-flex flex-column align-items-center align-items-sm-start px-3 pt-2 text-white min-vh-100">
                <a href="/" class="d-flex align-items-center pb-3 mb-md-0 me-md-auto text-black text-decoration-none">
                    <span class="fs-7 d-none d-sm-inline mt-2" style="text-decoration:dashed">
                        <div class="d-flex">  
                            <div> <MudAvatar Size="Size.Medium" Color="Color.Primary">S</MudAvatar></div>
                            <div>
                                <p Style="margin-left:10px;margin-top:10px;" class="fw-bold">SCG</p>
                            </div>
                        </div>
                      
                    </span>
                </a>
                <ul class="nav nav-pills flex-column mb-sm-auto mb-0 align-items-center align-items-sm-start" id="menu">
                    <li class="nav-item">
                        <a href="#" class="nav-link align-middle px-0">
                            <i class="fs-4 bi-house"></i> <span class="ms-1 d-none d-sm-inline" style="color:black">Overview</span>
                        </a>
                    </li>
                    <li>
                        <a href="#submenu1" data-bs-toggle="collapse" class="nav-link px-0 align-middle">
                            <i class="fs-4 bi-speedometer2"></i> <span class="ms-1 d-none d-sm-inline" style="color:black">Dashboard</span>
                        </a>
                       
                    </li>
                    <li>
                        <a href="#" class="nav-link px-0 align-middle">
                            <i class="fs-4 bi-table"></i> <span class="ms-1 d-none d-sm-inline" style="color:black">Orders</span>
                        </a>
                    </li>
                   
                    
                    <li>
                        <a href="#" class="nav-link px-0 align-middle">
                            <i class="fs-4 bi-people"></i> <span class="ms-1 d-none d-sm-inline" style="color:black">Customers</span>
                        </a>
                    </li>
                </ul>
                <hr>
                <div class="dropdown">
                    <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" id="dropdownUser1" data-bs-toggle="dropdown" aria-expanded="false">
                        <img src="https://github.com/mdo.png" alt="hugenerd" width="30" height="30" class="rounded-circle">
                        <span class="d-none d-sm-inline mx-1" style="color:black">Aditya Ray</span>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-dark text-small shadow">
                       
                        <li><a class="dropdown-item" href="#">Sign out</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col ">
            <p class="fw-bolder fs-4 ms-3 py-4">Symbiotic Consulting Group</p>

            <div class=" d-flex justify-content-between align-items-center p-2">
                <div class="col align-text-bottom ">
                    <p class="mb-0 fw-bold" style="font-size:13px;">New</p>
                </div>
                <div class="col ">
                    <p class="mb-0 fw-bold" style="font-size:13px;">Active</p>
                </div>
                <div class="col">
                    <p class="mb-0 fw-bold" style="font-size:13px;">Completed</p>
                </div>
            </div>

            <div class="d-flex justify-content-between col-3 w-100" style="background-color:#f4f4f4;height:100vh">
                <!-- New Tasks Column -->
                <div class="col mb-2 mt-2">
                    <div class="d-flex align-items-center" style="height:16%">
                        <button @onclick="ShowNewTaskModal">
                            <img src="create.svg" alt="" style="width:20px;height:20px;margin-left:30px; margin-top:30px;" />
                            <p class="ps-2 fw-bold" style="margin-top:45px;color:#34a853">New</p>
                        </button>
                    </div>
                    <div class="col">
                        @foreach (var task in NewTasks)
                        {
                            <TaskCard TaskData="@task" />
                        }
                    </div>
                   

                </div>
                    <!-- New Tasks -->
              
                <!-- Active Tasks Column -->
                <div class="col mb-2 mt-2 ">
                    @foreach (var task in ActiveTasks)
                    {
                            <TaskCard TaskData="@task" />
                        
                    }
                </div>

                       

                <!-- Completed Tasks Column -->
                <div class="col mb-2 mt-2 ">
                    @foreach (var task in CompletedTasks)
                    {
                        <TaskCard TaskData="@task" />
                    }
                </div>
             

        </div>

    </div>
</div>
</div>

@if (IsNewTaskModalVisible)
{
    <div class="modal-overlay">
        <div class="modal-box">
            <h3>Add New Task</h3>
            <div class="modal-input">
                <label>Task Title:</label>
                <input @bind="NewTask.Task_Title" type="text" placeholder="Enter task title..." />
            </div>
           <div class="modal-input">
                 <label>Deadline:</label>
                 <input @bind="NewTask.TimeStamp" type="date" />
             </div>

            <div class="modal-input">
                <label>Employee Name:</label>
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        Select Employees
                    </button>
                    <ul class="dropdown-menu" style="width:100%;">
                        @foreach (var employee in employees)
                        {
                            <li class="dropdown-item d-flex align-items-center">
                                <input type="checkbox" checked="@SelectedEmployeeIds.Contains(employee.emp_Id)"
                                       @onchange="(e) => ToggleEmployeeSelection(employee.emp_Id, e)" class="me-2" />
                                @employee.employee_Name
                            </li>
                        }
                    </ul>
                </div>
            </div>
            

            <div class="modal-input">
                <label>Tags:</label>
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        Select Tags
                    </button>
                    <ul class="dropdown-menu">
                        @foreach (var tag in tags)
                        {
                            <li class="dropdown-item" style="display: flex; align-items: center;">
                                <input type="checkbox" checked="@SelectedTagIds.Contains(tag.tag_Id)"
                                       @onchange="(e) => ToggleTagSelection(tag.tag_Id, e)" style="margin-right: 8px;" />
                                @tag.tag_Name
                            </li>
                        }
                    </ul>
                </div>
            </div>

             <div class="modal-input">
                 <label>Status Name:</label>
                 <select @onchange="OnStatusSelectionChanged">
                     @foreach (var status in statuses)
                     {
                         <option value="@status.Status_Id">@status.Status_Name</option>
                     }
                 </select>
             </div>
           

          

        

            <div class="modal-actions">
                <button class="btn add-btn" @onclick="AddNewTask">Add</button>
                <button class="btn cancel-btn" @onclick="CloseNewTaskModal">Cancel</button>
                @if (@error.Length>0)
                {
                    <p>@error</p>
                }
              
            </div>
        </div>
    </div>
    
}





@code {

 



    private List<TaskModelList> Tasks = new();
    private List<TaskModelList> NewTasks = new();
    private List<TaskModelList> ActiveTasks = new();
    private List<TaskModelList> CompletedTasks = new();
    private string error = ""; 
    private TaskModel NewTask = new TaskModel();
    private List<Employees> EmployeeList = new();
    private List<int> SelectedEmployeeIds { get; set; } = new();
    private List<int> SelectedTagIds { get; set; } = new();
    private List<int> SelectedStatusId=new();
    private bool IsNewTaskModalVisible = false;
    private List<TaskStatusss> statuses = new List<TaskStatusss>();
    public HttpClient httpClient = new HttpClient();
    List<Employees> employees = new List<Employees>();
    List<Tags> tags = new List<Tags>();



    private void ToggleTagSelection(int tagId, ChangeEventArgs e)
    {
        if ((bool)e.Value!)
        {
            if (!SelectedTagIds.Contains(tagId))
                SelectedTagIds.Add(tagId);
        }
        else
        {
            SelectedTagIds.Remove(tagId);
        }
    }


    private void ToggleEmployeeSelection(int empId, ChangeEventArgs e)
    {
        if ((bool)e.Value!)
        {
            if (!SelectedEmployeeIds.Contains(empId))
                SelectedEmployeeIds.Add(empId);
        }
        else
        {
            SelectedEmployeeIds.Remove(empId);
        }
    }


    protected override async Task OnInitializedAsync()
    {
       Tasks = await httpClient.GetFromJsonAsync<List<TaskModelList>>("https://localhost:7083/getTasks");

        var response = await httpClient.GetFromJsonAsync<EmployeeResponse>("https://localhost:7083/getemployees");
        if (response.value != null)
        {
            employees = response.value.ToList();
            StateHasChanged();
        }
        var Tagresponse = await httpClient.GetFromJsonAsync<TagResponse>("https://localhost:7083/getTags");
        if (Tagresponse.value != null)
        {
            tags = Tagresponse.value.ToList();
            StateHasChanged();
        }
        var Statusresponse = await httpClient.GetFromJsonAsync<StatusResponse>("https://localhost:7083/getstatus");
        if (Statusresponse.value != null)
        {
            statuses = Statusresponse.value.ToList();
            StateHasChanged();
        }
        CategorizeTasks();

    }


    public async void AddNewTask()
    {
        NewTask.EmployeeTasks = SelectedEmployeeIds.Select(id => new EmployeeTasks { EmpId = id }).ToList();
        // NewTask.EmployeeTasks.Add = NewTask.Task_Id
        if (SelectedTagIds.Count > 0)
        {
            NewTask.TaskTags = SelectedTagIds.Select(id => new TaskTag { TagId = id }).ToList();
        }

        NewTask.TaskStatuses = SelectedStatusId.Select(id => new TaskStatuses { StatusId = id }).ToList();


        NewTask.Deadline = NewTask.TimeStamp.ToString("yyyy-MM-dd");

        HttpClient httpClient = new HttpClient();
        var response = await httpClient.PostAsJsonAsync("https://localhost:7083/addTask", NewTask);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Task added successfully!");
            CloseNewTaskModal();
            await OnInitializedAsync();
           
        }
        else
        {
            Console.WriteLine("Error adding task.");
         
            StateHasChanged();
        }
    }
    public void ShowNewTaskModal()
    {
        IsNewTaskModalVisible=true;
        StateHasChanged();
    }
    private void CloseNewTaskModal()
    {
        IsNewTaskModalVisible = false;
        StateHasChanged();
    } 

    

   

    private void OnStatusSelectionChanged(ChangeEventArgs e)
    {
        if (e.Value is string selectedValue)
        {
            int statusId = int.Parse(selectedValue);
            if (!SelectedStatusId.Contains(statusId))
            {
                SelectedStatusId.Add(statusId);
            }
        }
    }

    private void CategorizeTasks()
    {
        NewTasks = Tasks.Where(task => task.TaskStatuses.Any(s => s.StatusId == 2)).ToList();
        ActiveTasks = Tasks.Where(task => task.TaskStatuses.Any(s => s.StatusId == 1)).ToList();
        CompletedTasks = Tasks.Where(task => task.TaskStatuses.Any(s => s.StatusId == 3)).ToList();

        StateHasChanged();
    }


   

} 





